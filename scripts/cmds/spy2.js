const axios = require("axios");

module.exports = {
  config: {
    name: "spy2",
    aliases: ["whoishe", "whoisshe", "whoami", "stalk"],
    version: "2.0",
    role: 0,
    author: "xnil6x",
    description: "Get detailed user information with elegant presentation",
    category: "information",
    countDown: 5,
  },

  onStart: async function({ event, message, usersData, api, args }) {
    let targetUID;
    const senderID = event.senderID;

    // ржЯрж╛рж░рзНржЧрзЗржЯ UID ржирж┐рж░рзНржзрж╛рж░ржг
    if (args[0]) {
      if (/^\d+$/.test(args[0])) { // ржпржжрж┐ рж╕рж░рж╛рж╕рж░рж┐ UID ржжрзЗржпрж╝
        targetUID = args[0];
      } else { // ржпржжрж┐ profile.php рж▓рж┐ржВржХ ржжрзЗржпрж╝
        const match = args[0].match(/profile\.php\?id=(\d+)/);
        if (match) targetUID = match[1];
      }
    }

    // ржпржжрж┐ ржЖрж░рзНржЧрзБржорзЗржирзНржЯ ржирж╛ ржерж╛ржХрзЗ, рж░рж┐ржкрзНрж▓рж╛ржЗ ржмрж╛ ржорзЗржирж╢ржи ржЪрзЗржХ ржХрж░рзЛ, ржирж╛ рж╣рж▓рзЗ ржирж┐ржЬрзЗрж░ ID ржирж╛ржУ
    targetUID = targetUID || (event.type === "message_reply" ? event.messageReply.senderID : Object.keys(event.mentions || {})[0] || senderID);

    if (!targetUID) {
      return message.reply("ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЬржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржЯрзНржпрж╛ржЧ ржХрж░рзБржи, ржПржХржЯрж┐ ржмрж╛рж░рзНрждрж╛рж░ ржЙрждрзНрждрж░ ржжрж┐ржи, ржЕржержмрж╛ ржПржХржЯрж┐ UID ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред");
    }

    try {
      // ржЗржЙржЬрж╛рж░рзЗрж░ рждржерзНржп ржЖржирж╛
      const userInfo = await api.getUserInfo(targetUID);
      const user = userInfo[targetUID]; // getUserInfo ржПржХржЯрж┐ ржЕржмржЬрзЗржХрзНржЯ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ

      if (!user) {
        return message.reply("ржПржЗ ржЗржЙржЬрж╛рж░рзЗрж░ рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред");
      }

      // Avatar URL ржЖржирж╛ (global.utils.getStreamFromURL ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ)
      const avatarStream = await global.utils.getStreamFromURL(`https://graph.facebook.com/${targetUID}/picture?width=720&height=720`);

      // ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржбрзЗржЯрж╛ (ржпржжрж┐ usersData.get() ржХрж╛ржЬ ржХрж░рзЗ)
      let userDataLocal = {};
      try {
        userDataLocal = await usersData.get(targetUID) || {};
      } catch (e) {
        console.warn("Could not fetch user data from usersData.get:", e);
      }

      // рж╕ржм ржЗржЙржЬрж╛рж░рзЗрж░ ржбрзЗржЯрж╛ ржЖржирж╛ (рж░рзНржпрж╛ржЩрзНржХ ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗрж╢ржирзЗрж░ ржЬржирзНржп)
      let allUsersData = [];
      try {
        allUsersData = await usersData.getAll() || [];
      } catch (e) {
        console.warn("Could not fetch all users data from usersData.getAll:", e);
      }

      const genderMap = {
        1: "тЩАя╕П Girl",
        2: "тЩВя╕П Boy",
        undefined: "ЁЯМИ Custom" // Facebook API рждрзЗ gender 1 (Female), 2 (Male) рж╣ржпрж╝, ржмрж╛ржХрж┐ржЯрж╛ Custom ржзрж░рзЗ ржирзЗржУржпрж╝рж╛
      };

      const formatMoney = num => {
        if (isNaN(num)) return "0";
        const units = ["", "K", "M", "B", "T"];
        let unit = 0;
        while (num >= 1000 && unit < units.length - 1) {
          num /= 1000;
          unit++;
        }
        return num.toFixed(1).replace(/\.0$/, "") + units[unit];
      };

      const getRank = (id, key, allUsers) => {
        const sorted = [...allUsers].sort((a, b) => (b[key] || 0) - (a[key] || 0));
        const rank = sorted.findIndex(u => u.userID === id);
        return rank !== -1 ? rank + 1 : "N/A";
      };

      const stats = {
        money: userDataLocal.money || 0,
        exp: userDataLocal.exp || 0,
        rank: getRank(targetUID, 'exp', allUsersData),
        moneyRank: getRank(targetUID, 'money', allUsersData)
      };

      const createBox = (title, items) => {
        let box = `тХнтФАтФАтФА тЬж ${title} тЬж тФАтФАтФА\n`;
        items.forEach(([key, value]) => {
          box += `тФЬтФА ${key}: ${value}\n`;
        });
        box += `тХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА`;
        return box;
      };

      const profileBox = createBox("PROFILE", [
        ["ЁЯОн Name", user.name || "N/A"],
        ["ЁЯзм Gender", genderMap[user.gender] || "Unknown"],
        ["ЁЯЖФ UID", targetUID],
        ["ЁЯСС Status", user.type?.toUpperCase() || "Regular User"],
        ["ЁЯП╖я╕П Username", user.vanity || "None"],
        ["ЁЯОВ Birthday", user.isBirthday ? "тЬЕ Has Birthday" : "тЭМ No Birthday info"],
        ["ЁЯТл Nickname", user.alternateName || "None"],
        ["ЁЯдЦ Bot Friend", user.isFriend ? "тЬЕ Yes" : "тЭМ No"]
      ]);

      const statsBox = createBox("STATISTICS", [
        ["ЁЯТ░ Money", `$${formatMoney(stats.money)}`],
        ["тнР Experience", stats.exp],
        ["ЁЯПЖ Rank", stats.rank !== "N/A" ? `#${stats.rank}/${allUsersData.length}` : "N/A"],
        ["ЁЯТО Wealth Rank", stats.moneyRank !== "N/A" ? `#${stats.moneyRank}/${allUsersData.length}` : "N/A"]
      ]);

      const profileUrl = `ЁЯМР Profile: ${user.profileUrl || "N/A"}`;

      await message.reply({
        body: `${profileBox}\n\n${statsBox}\n\n${profileUrl}`,
        attachment: avatarStream
      });

    } catch (error) {
      console.error("Spy Command Error:", error);
      message.reply("ЁЯФН ржПржЗ ржЗржЙржЬрж╛рж░рзЗрж░ ржЙржкрж░ рж╕рзНржкрж╛ржЗ ржХрж░рж╛ рж╕ржорзНржнржм рж╣ржпрж╝ржирж┐ред рж╕ржорзНржнржмржд рж╕рзЗ ржЕржжрзГрж╢рзНржп рж╣ржпрж╝рзЗ ржЧрзЗржЫрзЗ ржЕржержмрж╛ ржХрзЛржирзЛ ржнрзБрж▓ рж╣ржпрж╝рзЗржЫрзЗред");
    }
  }
};
         
