const axios = require("axios");
const fs = require('fs');
const path = require('path');

// --- Helper Functions ---

// Base API URL ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
async function getBaseApiUrl() {
  try {
    const response = await axios.get("https://raw.githubusercontent.com/Blankid018/D1PT0/main/baseApiUrl.json");
    return response.data.api;
  } catch (error) {
    console.error("‚ùå Failed to fetch base API URL:", error);
    return null;
  }
}

// ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
async function downloadFile(url, pathName) {
  const writer = fs.createWriteStream(pathName);
  const response = await axios({ url, method: 'GET', responseType: 'stream' });
  response.data.pipe(writer);
  return new Promise((resolve, reject) => {
    writer.on('finish', () => resolve(fs.createReadStream(pathName)));
    writer.on('error', (err) => {
      writer.destroy();
      if (fs.existsSync(pathName)) fs.unlink(pathName, () => reject(err)); // Clean up failed download
      else reject(err);
    });
  });
}

// ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ï‡¶∞‡¶æ ‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
async function streamUrl(url, pathName) {
  try {
    const response = await axios.get(url, { responseType: "arraybuffer" });
    const buffer = Buffer.from(response.data);
    fs.writeFileSync(pathName, buffer);
    return fs.createReadStream(pathName);
  } catch (err) {
    console.error("‚ùå Error streaming URL:", err);
    throw err;
  }
}

// --- Main Command Configuration ---

module.exports = {
  config: {
    name: "video", // ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
    version: "1.4.0",
    author: "Dipto (Modified by Perplexity)",
    countDown: 15, // ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶ß‡¶æ‡¶®
    role: 0, // ‡¶ï‡ßá ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá (0 = ‡¶∏‡¶¨‡¶æ‡¶á)
    description: "YouTube ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì, ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶¨‡¶æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    category: "media",
    guide: {
        en: "{p}video [‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶∂‡¶¨‡ßç‡¶¶]\n{p}video -a [‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶∂‡¶¨‡ßç‡¶¶]\n{p}video -i [‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶∂‡¶¨‡ßç‡¶¶]\n{p}video [YouTube ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï]\n{p}video -a [YouTube ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï]\n{p}video -i [YouTube ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï]"
    }
  },

  // --- onStart Function ---
  onStart: async function ({ api, args, event, message }) {
    const { threadID, messageID, senderID } = event;
    const baseApiUrl = await getBaseApiUrl();

    if (!baseApiUrl) {
      return message.reply("‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡¶ø‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
    }
    
    let action = '-v'; // ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®: ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
    let query = args.join(" ");

    // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ
    if (query.startsWith('-a ')) {
      action = '-a';
      query = query.substring(3).trim();
    } else if (query.startsWith('-i ')) {
      action = '-i';
      query = query.substring(3).trim();
    } else if (query.startsWith('-v ')) {
      query = query.substring(3).trim(); // -v ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∞‡¶ø ‡¶Ö‡¶Ç‡¶∂ ‡¶®‡ßá‡¶Ø‡¶º‡¶æ ‡¶π‡¶¨‡ßá
    }
    
    if (!query) return message.reply('‚ùì ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶¶‡¶ø‡¶®‡•§');

    // YouTube ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
    const youtubeUrlRegex = /^(?:https?:\/\/)?(?:m\.|www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=|shorts\/))((\w|-){11})(?:\S+)?$/;
    const isYouTubeLink = youtubeUrlRegex.test(query);

    const loadingMessage = await message.reply(`‚è≥ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`);
    api.setMessageReaction("‚è≥", messageID, (err) => {}, true);

    if (isYouTubeLink) {
      const videoID = query.match(youtubeUrlRegex)[1];
      await handleDirectDownload(api, message, loadingMessage.messageID, threadID, messageID, videoID, action, baseApiUrl);
    } else {
      await handleSearchAndSelect(api, message, loadingMessage.messageID, threadID, messageID, senderID, query, action, baseApiUrl);
    }
  },
 
  // --- handleReply Function (‡¶Ø‡¶ñ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶´‡¶≤‡¶æ‡¶´‡¶≤‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßá) ---
  handleReply: async function ({ event, api, handleReply, message }) {
    const { senderID, body } = event;
    if (senderID !== handleReply.author) return; // ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá

    const choice = parseInt(body);
    if (isNaN(choice) || choice <= 0 || choice > handleReply.result.length) {
      return message.reply("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®‡•§");
    }
    
    const selectedVideo = handleReply.result[choice - 1];
    const videoID = selectedVideo.id;
    const { action, baseApiUrl } = handleReply;

    // ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ
    try {
      await api.unsendMessage(handleReply.messageID);
    } catch (e) {
      console.error("‚ùå Failed to unsend message:", e);
    }
    
    // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    const loadingMessage = await message.reply("‚è≥ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶è‡¶§‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶≤‡¶æ‡¶ó‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§");
    
    // ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
    if (handleReply.tempThumbnailPaths && handleReply.tempThumbnailPaths.length > 0) {
      handleReply.tempThumbnailPaths.forEach(p => {
        if (fs.existsSync(p)) {
          fs.unlink(p, err => {
            if (err) console.error("‚ùå Error deleting temp thumbnail:", err);
          });
        }
      });
    }

    await handleDirectDownload(api, message, loadingMessage.messageID, event.threadID, event.messageID, videoID, action, baseApiUrl);
  }
};

// --- Helper Functions for Download and Search ---

// ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡¶æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶æ
async function handleDirectDownload(api, message, loadingMsgID, threadID, messageID, videoID, action, baseApiUrl) {
  try {
    let format = 'mp4';
    let quality = '22'; // Default: 720p for video

    if (action === '-a') {
      format = 'mp3';
      quality = '140'; // Highest quality audio
    }

    if (action === '-i') { // ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
      const { data } = await axios.get(`${baseApiUrl}/ytfullinfo?videoID=${videoID}`);
      const infoBody = `‚ú® **‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ:** ${data.title}\n` +
                       `‚è≥ **‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ï‡¶æ‡¶≤:** ${(data.duration / 60).toFixed(2)} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü\n` +
                       `üì∫ **‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤:** ${data.channel}\n` +
                       `üëÄ **‡¶¶‡ßá‡¶ñ‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:** ${data.view_count?.toLocaleString() || 'N/A'}\n` +
                       `üëç **‡¶≤‡¶æ‡¶á‡¶ï:** ${data.like_count?.toLocaleString() || 'N/A'}\n` +
                       `üí¨ **‡¶Æ‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø:** ${data.comment_count?.toLocaleString() || 'N/A'}`;
      
      const thumb
                                           
