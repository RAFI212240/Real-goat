const axios = require("axios");

module.exports = {
	config: {
		name: "chat",
		version: "3.1",
		author: "Fixed Version",
		countDown: 3,
		role: 0,
		shortDescription: "Human-like AI Chatbot",
		longDescription: {
			en: "Chat with human-like AI - responds to mentions and natural conversations"
		},
		category: "ai",
		guide: {
			en: "{pn} <message> | {pn} on/off | mention 'bot' in message"
		},
	},

	langs: {
		en: {
			turnedOn: "✅ AI Auto Chat turned on successfully!",
			turnedOff: "❌ AI Auto Chat turned off successfully!",
			error: "Sorry, I'm having trouble understanding right now. Please try again! 😅",
		},
	},

	onStart: async function ({ args, threadsData, message, event, getLang }) {
		try {
			if (args[0] == "on" || args[0] == "off") {
				await threadsData.set(event.threadID, args[0] == "on", "settings.simsimi");
				return message.reply(args[0] == "on" ? getLang("turnedOn") : getLang("turnedOff"));
			} else if (args[0]) {
				const yourMessage = args.join(" ");
				const responseMessage = await getHumanLikeResponse(yourMessage);
				return message.reply(responseMessage);
			}
		} catch (error) {
			console.error("Chat onStart error:", error.message);
			return message.reply(getLang("error"));
		}
	},

	onChat: async function ({ args, message, threadsData, event, isUserCallCommand, getLang }) {
		try {
			// Skip if it's a command call
			if (isUserCallCommand) return;
			
			const messageText = args.join(" ");
			if (!messageText || messageText.length < 2) return;
			
			const lowerMsg = messageText.toLowerCase();
			const isAutoModeOn = await threadsData.get(event.threadID, "settings.simsimi");
			
			// Check if message mentions "bot" keywords
			const botKeywords = ['bot', 'ai', 'robot', 'chatbot', 'বট', 'রোবট'];
			const mentionsBot = botKeywords.some(keyword => lowerMsg.includes(keyword));
			
			// Only respond if auto mode is on OR bot is mentioned (not both)
			if (isAutoModeOn || mentionsBot) {
				const langCode = (await threadsData.get(event.threadID, "settings.lang")) || "en";
				const responseMessage = await getHumanLikeResponse(messageText, langCode, mentionsBot);
				
				// Add small delay to seem more human
				setTimeout(() => {
					message.reply(responseMessage);
				}, 800);
			}
			
		} catch (error) {
			console.error("Chat onChat error:", error.message);
			// Don't reply on onChat errors to avoid spam
		}
	},
};

// Get human-like response
async function getHumanLikeResponse(yourMessage, langCode = "en", mentionsBot = false) {
	try {
		// Try AI API first
		const aiResponse = await tryAIAPI(yourMessage, langCode);
		if (aiResponse) {
			return humanizeResponse(aiResponse);
		}
	} catch (error) {
		// Silent fail, use fallback
	}
	
	// Use contextual fallback
	return getContextualFallback(yourMessage, mentionsBot);
}

// Try AI API with proper error handling
async function tryAIAPI(message, langCode) {
	try {
		const response = await axios.post(
			"https://api.simsimi.vn/v1/simtalk",
			new URLSearchParams({
				text: message,
				lc: langCode || "en",
			}),
			{ 
				timeout: 5000,
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded'
				}
			}
		);
		
		if (response.data && response.data.message && response.data.message.length > 0) {
			return response.data.message;
		}
		
		return null;
	} catch (error) {
		return null;
	}
}

// Make response more human-like
function humanizeResponse(response) {
	if (!response) return "I'm not sure how to respond to that 🤔";
	
	let humanized = response.toString();
	
	// Add casual expressions (low chance to avoid spam)
	const casualStarters = ["Well, ", "You know, ", "Actually, ", "Hmm, "];
	const casualEnders = [" 😊", " 🤔", " 😄", " 👍"];
	
	// 15% chance for casual starter
	if (Math.random() < 0.15) {
		const starter = casualStarters[Math.floor(Math.random() * casualStarters.length)];
		humanized = starter + humanized;
	}
	
	// 20% chance for casual ender
	if (Math.random() < 0.2) {
		const ender = casualEnders[Math.floor(Math.random() * casualEnders.length)];
		humanized = humanized + ender;
	}
	
	// Make contractions
	humanized = humanized
		.replace(/\bI am\b/gi, "I'm")
		.replace(/\bdo not\b/gi, "don't")
		.replace(/\bcannot\b/gi, "can't")
		.replace(/\byou are\b/gi, "you're")
		.replace(/\bit is\b/gi, "it's");
	
	return humanized;
}

// Contextual fallback responses
function getContextualFallback(message, mentionsBot) {
	const lowerMsg = message.toLowerCase();
	
	// Greeting responses
	if (lowerMsg.includes('hello') || lowerMsg.includes('hi') || lowerMsg.includes('hey') || lowerMsg.includes('হাই')) {
		const greetings = [
			"Hey there! How's it going? 😊",
			"Hi! What's up? 🙂",
			"Hello! How are you? ✨",
			"হাই! কেমন আছো? 😄"
		];
		return greetings[Math.floor(Math.random() * greetings.length)];
	}
	
	// How are you
	if (lowerMsg.includes('how are you') || lowerMsg.includes('কেমন আছো')) {
		const responses = [
			"I'm doing great! How about you? 😊",
			"Pretty good! What about you? 🤗",
			"ভালো আছি! তুমি কেমন? 😊"
		];
		return responses[Math.floor(Math.random() * responses.length)];
	}
	
	// Joke requests
	if (lowerMsg.includes('joke') || lowerMsg.includes('funny')) {
		const jokes = [
			"Why don't scientists trust atoms? Because they make up everything! 😄",
			"I told my computer a joke... but it didn't laugh! 😂",
			"Why did the programmer quit? He didn't get arrays! 🤓"
		];
		return jokes[Math.floor(Math.random() * jokes.length)];
	}
	
	// Bot mentions
	if (mentionsBot) {
		const botResponses = [
			"Yes, I'm here! What's up? 🤖",
			"You called? I'm listening! 👂",
			"Hey! What can I help you with? 💭",
			"হ্যাঁ, বলো! কি দরকার? 🤖"
		];
		return botResponses[Math.floor(Math.random() * botResponses.length)];
	}
	
	// General responses
	const generalResponses = [
		"That's interesting! 🤔",
		"I see what you mean! 💭",
		"Really? That's cool! 😊",
		"আহা! দারুণ! 😄",
		"বুঝলাম! 🤗"
	];
	
	return generalResponses[Math.floor(Math.random() * generalResponses.length)];
}
