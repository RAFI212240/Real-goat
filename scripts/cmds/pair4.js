const axios = require("axios");
const fs = require("fs-extra");
const { loadImage, createCanvas } = require("canvas");
const path = require("path");

module.exports = {
  config: {
    name: "pair4",
    version: "1.1",
    countDown: 10,
    role: 0,
    author: "Modified by Assistant",
    shortDescription: {
      en: "Get to know your partner",
    },
    longDescription: {
      en: "Find your soulmate from the group based on opposite gender.",
    },
    category: "LOVE",
    guide: {
      en: "{pn} or {pn} @mention",
    },
  },

  onStart: async function ({ api, event, usersData }) {
    try {
      // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡ßá‡¶ü ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
      const assetsPath = path.join(__dirname, "assets");
      if (!fs.existsSync(assetsPath)) {
        fs.mkdirSync(assetsPath);
      }

      const pathImg = path.join(assetsPath, "background.png");
      const pathAvt1 = path.join(assetsPath, "avatar1.png");
      const pathAvt2 = path.join(assetsPath, "avatar2.png");

      // ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ (‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶¨‡¶æ ‡¶∏‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞)
      let targetID = event.senderID;
      const mentions = Object.keys(event.mentions);
      if (mentions.length > 0) {
        targetID = mentions[0];
      }

      const targetName = await usersData.getName(targetID);
      const threadInfo = await api.getThreadInfo(event.threadID);
      const allUsers = threadInfo.userInfo;

      // ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ó ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
      const targetUserInfo = allUsers.find(user => user.id === targetID);
      const targetGender = targetUserInfo ? targetUserInfo.gender : null;

      if (!targetGender) {
        return api.sendMessage(`‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ${targetName}-‡¶è‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§`, event.threadID, event.messageID);
      }

      const botID = api.getCurrentUserID();
      let candidates = [];

      // ‡¶¨‡¶ø‡¶™‡¶∞‡ßÄ‡¶§ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ó‡ßá‡¶∞ ‡¶∏‡¶ô‡ßç‡¶ó‡ßÄ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ
      if (targetGender.toLowerCase() === "male") {
        candidates = allUsers.filter(user => user.id !== targetID && user.id !== botID && user.gender && user.gender.toLowerCase() === "female");
      } else if (targetGender.toLowerCase() === "female") {
        candidates = allUsers.filter(user => user.id !== targetID && user.id !== botID && user.gender && user.gender.toLowerCase() === "male");
      }

      // ‡¶Ø‡¶¶‡¶ø ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶∏‡¶ô‡ßç‡¶ó‡ßÄ ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü
      if (candidates.length === 0) {
        return api.sendMessage(`‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§ ${targetName}, ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶∏‡¶ô‡ßç‡¶ó‡ßÄ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§`, event.threadID, event.messageID);
      }

      // ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡¶∏‡¶ô‡ßç‡¶ó‡ßÄ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®
      const randomPartner = candidates[Math.floor(Math.random() * candidates.length)];
      const partnerID = randomPartner.id;
      const partnerName = await usersData.getName(partnerID);

      const tile = `${Math.floor(Math.random() * 81) + 20}`; // 20% ‡¶•‡ßá‡¶ï‡ßá 100%

      // ‡¶õ‡¶¨‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
      const getAvatar = async (id, filePath) => {
        try {
          const avatarUrl = `https://graph.facebook.com/${id}/picture?width=720&height=720&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`;
          const response = await axios.get(avatarUrl, { responseType: "arraybuffer" });
          fs.writeFileSync(filePath, Buffer.from(response.data));
        } catch (e) {
            console.error(`Failed to download avatar for ID ${id}:`, e);
            // ‡¶´‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶á‡¶Æ‡ßá‡¶ú ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
        }
      };
      
      const backgroundUrl = "https://i.ibb.co/RBRLmRt/Pics-Art-05-14-10-47-00.jpg";
      const bgResponse = await axios.get(backgroundUrl, { responseType: "arraybuffer" });
      fs.writeFileSync(pathImg, Buffer.from(bgResponse.data));

      await getAvatar(targetID, pathAvt1);
      await getAvatar(partnerID, pathAvt2);

      // ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡¶≠‡¶æ‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá ‡¶õ‡¶¨‡¶ø ‡¶§‡ßà‡¶∞‡¶ø
      const baseImage = await loadImage(pathImg);
      const baseAvt1 = await loadImage(pathAvt1);
      const baseAvt2 = await loadImage(pathAvt2);
      const canvas = createCanvas(baseImage.width, baseImage.height);
      const ctx = canvas.getContext("2d");

      ctx.drawImage(baseImage, 0, 0, canvas.width, canvas.height);
      ctx.drawImage(baseAvt1, 111, 175, 330, 330);
      ctx.drawImage(baseAvt2, 1018, 173, 330, 330);

      const imageBuffer = canvas.toBuffer();
      fs.writeFileSync(pathImg, imageBuffer);
      fs.removeSync(pathAvt1);
      fs.removeSync(pathAvt2);

      // ‡¶ö‡ßÇ‡ßú‡¶æ‡¶®‡ßç‡¶§ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
      return api.sendMessage({
        body: `‚ï≠‚îÄ‚îÄ ùêèùêöùê¢ùê´ ùêëùêûùê¨ùêÆùê•ùê≠ ‚îÄ‚îÄ‚ïÆ\n\n‚ú® ùêáùêûùê≤ ${name1}~!\n\nüíò ùêòùê®ùêÆùê´ ùê¨ùê®ùêÆùê•ùê¶ùêöùê≠ùêû ùê¢ùê¨: ${name2}!\n\n‚ù§Ô∏è ùêãùê®ùêØùêû ùêåùêöùê≠ùêúùê°: ${tile}%\n\n‚õìÔ∏è ùêÉùêûùê¨ùê≠ùê¢ùêßùê≤ ùêõùê´ùê®ùêÆùê†ùê°ùê≠ ùê≤ùê®ùêÆ ùê≠ùê∞ùê® ùê≠ùê®ùê†ùêûùê≠ùê°ùêûùê´~\n\n‚ï∞‚îÄ‚îÄ ‚ú® üå¨Ô∏è Mahiru Shina ‚ú® ‚îÄ‚îÄ‚ïØ`,
        mentions: [
          { tag: targetName, id: targetID },
          { tag: partnerName, id: partnerID },
        ],
        attachment: fs.createReadStream(pathImg),
      }, event.threadID, () => fs.unlinkSync(pathImg), event.messageID);

    } catch (error) {
      console.error("Pairing Error:", error);
      return api.sendMessage("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶ú‡ßÅ‡¶ü‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", event.threadID, event.messageID);
    }
  },

  onChat: async function (context) {
    const { event } = context;
    if (event.body && (event.body.toLowerCase() === "pair" || event.body.toLowerCase() === "‡¶ú‡ßÅ‡¶ü‡¶ø")) {
      // onChat ‡¶•‡ßá‡¶ï‡ßá onStart ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü mentions ‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡§™‡§æ‡§∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
      // ‡¶§‡¶¨‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø onStart ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶Ø‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
      return this.onStart(context);
    }
  },
};
    
